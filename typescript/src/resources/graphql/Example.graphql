# Custom scalar type
scalar Odd
scalar Date

extend type Query {
    "Query an event from an input date"
    eventAt(date: Date!): Event
}

type Event {
    id: ID!
    createdAt: Date!
    name: String!
}

type Query {
    getAllUsers: [User]
    example: Example
}

type Mutation {
    exampleMutation(input: ExampleInput): ExamplePayload
}

type Example {
    id: ID
    user: User
}

type User {
    name: String
}

input ExampleInput {
    exampleId: ID!
    newName: String!
    number: Odd
}

type ExamplePayload {
    example: Example
    userError: [ExampleError]
}

interface UserInputError {
    message: String!
    path: [String!]
}

union ExampleError = InvalidNameError | NameTooLongError

type InvalidNameError implements UserInputError {
    message: String!
    path: [String!]
}

type NameTooLongError implements UserInputError {
    message: String!
    path: [String!]
}
